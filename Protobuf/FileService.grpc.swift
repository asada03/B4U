//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: FileService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Proto_FileServicecreateFileCall: ClientCallUnary {}

fileprivate final class Proto_FileServicecreateFileCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServicecreateFileCall {
  override class var method: String { return "/proto.FileService/createFile" }
}

internal protocol Proto_FileServiceupdateFileCall: ClientCallUnary {}

fileprivate final class Proto_FileServiceupdateFileCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceupdateFileCall {
  override class var method: String { return "/proto.FileService/updateFile" }
}

internal protocol Proto_FileServicedeleteFileCall: ClientCallUnary {}

fileprivate final class Proto_FileServicedeleteFileCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServicedeleteFileCall {
  override class var method: String { return "/proto.FileService/deleteFile" }
}

internal protocol Proto_FileServiceappendContentCall: ClientCallUnary {}

fileprivate final class Proto_FileServiceappendContentCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceappendContentCall {
  override class var method: String { return "/proto.FileService/appendContent" }
}

internal protocol Proto_FileServicegetFileContentCall: ClientCallUnary {}

fileprivate final class Proto_FileServicegetFileContentCallBase: ClientCallUnaryBase<Proto_Query, Proto_Response>, Proto_FileServicegetFileContentCall {
  override class var method: String { return "/proto.FileService/getFileContent" }
}

internal protocol Proto_FileServicegetFileInfoCall: ClientCallUnary {}

fileprivate final class Proto_FileServicegetFileInfoCallBase: ClientCallUnaryBase<Proto_Query, Proto_Response>, Proto_FileServicegetFileInfoCall {
  override class var method: String { return "/proto.FileService/getFileInfo" }
}

internal protocol Proto_FileServiceadminDeleteCall: ClientCallUnary {}

fileprivate final class Proto_FileServiceadminDeleteCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceadminDeleteCall {
  override class var method: String { return "/proto.FileService/adminDelete" }
}

internal protocol Proto_FileServiceadminUndeleteCall: ClientCallUnary {}

fileprivate final class Proto_FileServiceadminUndeleteCallBase: ClientCallUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceadminUndeleteCall {
  override class var method: String { return "/proto.FileService/adminUndelete" }
}


/// Instantiate Proto_FileServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Proto_FileServiceService: ServiceClient {
  /// Synchronous. Unary.
  func createFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func createFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServicecreateFileCall

  /// Synchronous. Unary.
  func updateFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func updateFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceupdateFileCall

  /// Synchronous. Unary.
  func deleteFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func deleteFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServicedeleteFileCall

  /// Synchronous. Unary.
  func appendContent(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func appendContent(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceappendContentCall

  /// Synchronous. Unary.
  func getFileContent(_ request: Proto_Query) throws -> Proto_Response
  /// Asynchronous. Unary.
  func getFileContent(_ request: Proto_Query, completion: @escaping (Proto_Response?, CallResult) -> Void) throws -> Proto_FileServicegetFileContentCall

  /// Synchronous. Unary.
  func getFileInfo(_ request: Proto_Query) throws -> Proto_Response
  /// Asynchronous. Unary.
  func getFileInfo(_ request: Proto_Query, completion: @escaping (Proto_Response?, CallResult) -> Void) throws -> Proto_FileServicegetFileInfoCall

  /// Synchronous. Unary.
  func adminDelete(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func adminDelete(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceadminDeleteCall

  /// Synchronous. Unary.
  func adminUndelete(_ request: Proto_Transaction) throws -> Proto_TransactionResponse
  /// Asynchronous. Unary.
  func adminUndelete(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceadminUndeleteCall

}

internal final class Proto_FileServiceServiceClient: ServiceClientBase, Proto_FileServiceService {
  /// Synchronous. Unary.
  internal func createFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServicecreateFileCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func createFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServicecreateFileCall {
    return try Proto_FileServicecreateFileCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func updateFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServiceupdateFileCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func updateFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceupdateFileCall {
    return try Proto_FileServiceupdateFileCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func deleteFile(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServicedeleteFileCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func deleteFile(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServicedeleteFileCall {
    return try Proto_FileServicedeleteFileCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func appendContent(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServiceappendContentCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func appendContent(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceappendContentCall {
    return try Proto_FileServiceappendContentCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getFileContent(_ request: Proto_Query) throws -> Proto_Response {
    return try Proto_FileServicegetFileContentCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getFileContent(_ request: Proto_Query, completion: @escaping (Proto_Response?, CallResult) -> Void) throws -> Proto_FileServicegetFileContentCall {
    return try Proto_FileServicegetFileContentCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getFileInfo(_ request: Proto_Query) throws -> Proto_Response {
    return try Proto_FileServicegetFileInfoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getFileInfo(_ request: Proto_Query, completion: @escaping (Proto_Response?, CallResult) -> Void) throws -> Proto_FileServicegetFileInfoCall {
    return try Proto_FileServicegetFileInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func adminDelete(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServiceadminDeleteCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func adminDelete(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceadminDeleteCall {
    return try Proto_FileServiceadminDeleteCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func adminUndelete(_ request: Proto_Transaction) throws -> Proto_TransactionResponse {
    return try Proto_FileServiceadminUndeleteCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func adminUndelete(_ request: Proto_Transaction, completion: @escaping (Proto_TransactionResponse?, CallResult) -> Void) throws -> Proto_FileServiceadminUndeleteCall {
    return try Proto_FileServiceadminUndeleteCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_FileServiceProvider {
  func createFile(request: Proto_Transaction, session: Proto_FileServicecreateFileSession) throws -> Proto_TransactionResponse
  func updateFile(request: Proto_Transaction, session: Proto_FileServiceupdateFileSession) throws -> Proto_TransactionResponse
  func deleteFile(request: Proto_Transaction, session: Proto_FileServicedeleteFileSession) throws -> Proto_TransactionResponse
  func appendContent(request: Proto_Transaction, session: Proto_FileServiceappendContentSession) throws -> Proto_TransactionResponse
  func getFileContent(request: Proto_Query, session: Proto_FileServicegetFileContentSession) throws -> Proto_Response
  func getFileInfo(request: Proto_Query, session: Proto_FileServicegetFileInfoSession) throws -> Proto_Response
  func adminDelete(request: Proto_Transaction, session: Proto_FileServiceadminDeleteSession) throws -> Proto_TransactionResponse
  func adminUndelete(request: Proto_Transaction, session: Proto_FileServiceadminUndeleteSession) throws -> Proto_TransactionResponse
}

internal protocol Proto_FileServicecreateFileSession: ServerSessionUnary {}

fileprivate final class Proto_FileServicecreateFileSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServicecreateFileSession {}

internal protocol Proto_FileServiceupdateFileSession: ServerSessionUnary {}

fileprivate final class Proto_FileServiceupdateFileSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceupdateFileSession {}

internal protocol Proto_FileServicedeleteFileSession: ServerSessionUnary {}

fileprivate final class Proto_FileServicedeleteFileSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServicedeleteFileSession {}

internal protocol Proto_FileServiceappendContentSession: ServerSessionUnary {}

fileprivate final class Proto_FileServiceappendContentSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceappendContentSession {}

internal protocol Proto_FileServicegetFileContentSession: ServerSessionUnary {}

fileprivate final class Proto_FileServicegetFileContentSessionBase: ServerSessionUnaryBase<Proto_Query, Proto_Response>, Proto_FileServicegetFileContentSession {}

internal protocol Proto_FileServicegetFileInfoSession: ServerSessionUnary {}

fileprivate final class Proto_FileServicegetFileInfoSessionBase: ServerSessionUnaryBase<Proto_Query, Proto_Response>, Proto_FileServicegetFileInfoSession {}

internal protocol Proto_FileServiceadminDeleteSession: ServerSessionUnary {}

fileprivate final class Proto_FileServiceadminDeleteSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceadminDeleteSession {}

internal protocol Proto_FileServiceadminUndeleteSession: ServerSessionUnary {}

fileprivate final class Proto_FileServiceadminUndeleteSessionBase: ServerSessionUnaryBase<Proto_Transaction, Proto_TransactionResponse>, Proto_FileServiceadminUndeleteSession {}


/// Main server for generated service
internal final class Proto_FileServiceServer: ServiceServer {
  private let provider: Proto_FileServiceProvider

  internal init(address: String, provider: Proto_FileServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Proto_FileServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Proto_FileServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/proto.FileService/createFile":
      try Proto_FileServicecreateFileSessionBase(
        handler: handler,
        providerBlock: { try provider.createFile(request: $0, session: $1 as! Proto_FileServicecreateFileSessionBase) })
          .run()
      return true
    case "/proto.FileService/updateFile":
      try Proto_FileServiceupdateFileSessionBase(
        handler: handler,
        providerBlock: { try provider.updateFile(request: $0, session: $1 as! Proto_FileServiceupdateFileSessionBase) })
          .run()
      return true
    case "/proto.FileService/deleteFile":
      try Proto_FileServicedeleteFileSessionBase(
        handler: handler,
        providerBlock: { try provider.deleteFile(request: $0, session: $1 as! Proto_FileServicedeleteFileSessionBase) })
          .run()
      return true
    case "/proto.FileService/appendContent":
      try Proto_FileServiceappendContentSessionBase(
        handler: handler,
        providerBlock: { try provider.appendContent(request: $0, session: $1 as! Proto_FileServiceappendContentSessionBase) })
          .run()
      return true
    case "/proto.FileService/getFileContent":
      try Proto_FileServicegetFileContentSessionBase(
        handler: handler,
        providerBlock: { try provider.getFileContent(request: $0, session: $1 as! Proto_FileServicegetFileContentSessionBase) })
          .run()
      return true
    case "/proto.FileService/getFileInfo":
      try Proto_FileServicegetFileInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.getFileInfo(request: $0, session: $1 as! Proto_FileServicegetFileInfoSessionBase) })
          .run()
      return true
    case "/proto.FileService/adminDelete":
      try Proto_FileServiceadminDeleteSessionBase(
        handler: handler,
        providerBlock: { try provider.adminDelete(request: $0, session: $1 as! Proto_FileServiceadminDeleteSessionBase) })
          .run()
      return true
    case "/proto.FileService/adminUndelete":
      try Proto_FileServiceadminUndeleteSessionBase(
        handler: handler,
        providerBlock: { try provider.adminUndelete(request: $0, session: $1 as! Proto_FileServiceadminUndeleteSessionBase) })
          .run()
      return true
    default:
      return false
    }
  }
}

